from enum import Enum
from dataclasses import dataclass
from typing import Dict, List, Optional, Tuple
import time
import random

class StrategicGoal(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    EARLY_FARM = "early_farm"
    MID_GAME_PRESSURE = "mid_game_pressure"
    LATE_GAME_OBJECTIVES = "late_game_objectives"
    TEAM_FIGHT = "team_fight"
    DEFENSE = "defense"
    PUSH = "push"

class TacticalAction(Enum):
    """–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    LANE_FARM = "lane_farm"
    JUNGLE_FARM = "jungle_farm"
    GANK = "gank"
    PUSH_LANE = "push_lane"
    DEFEND_TOWER = "defend_tower"
    ROSHAN = "roshan"
    RETREAT = "retreat"

@dataclass
class MacroAction:
    """–ú–∞–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–µ - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    name: str
    tactical_actions: List[TacticalAction]
    duration: float  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    priority: int

@dataclass  
class GameState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
    hero_health: float
    hero_mana: float
    hero_level: int
    hero_gold: int
    position: Tuple[float, float]
    nearby_allies: int
    nearby_enemies: int
    game_time: float
    networth_advantage: float

class HeroRole(Enum):
    """–†–æ–ª–∏ –≥–µ—Ä–æ–µ–≤"""
    CARRY = "carry"
    MID = "mid"
    OFFLANE = "offlane"
    SUPPORT = "support"
    HARD_SUPPORT = "hard_support"

class HierarchicalAI:
    """
    –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–ê–Ø AI –°–ò–°–¢–ï–ú–ê - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
    """
    
    def __init__(self, memory_manager, metrics_collector, role: HeroRole):
        self.memory = memory_manager
        self.metrics = metrics_collector
        self.role = role
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_strategic_goal = StrategicGoal.EARLY_FARM
        self.current_tactical_action = TacticalAction.LANE_FARM
        self.current_macro_action = None
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        self.goal_start_time = time.time()
        self.tactical_start_time = time.time()
        
        # –ú–∞–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        self.macro_actions = self._initialize_macro_actions()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.goal_success_rate = {}
        self.tactical_success_rate = {}
    
    def _initialize_macro_actions(self) -> Dict[HeroRole, List[MacroAction]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
        return {
            HeroRole.CARRY: [
                MacroAction(
                    name="Safe Farming",
                    tactical_actions=[TacticalAction.LANE_FARM, TacticalAction.JUNGLE_FARM],
                    duration=300.0,
                    priority=1
                ),
                MacroAction(
                    name="Objective Push", 
                    tactical_actions=[TacticalAction.PUSH_LANE, TacticalAction.ROSHAN],
                    duration=180.0,
                    priority=2
                )
            ],
            HeroRole.MID: [
                MacroAction(
                    name="Gank Pressure",
                    tactical_actions=[TacticalAction.LANE_FARM, TacticalAction.GANK],
                    duration=240.0,
                    priority=1
                )
            ],
            HeroRole.SUPPORT: [
                MacroAction(
                    name="Team Support",
                    tactical_actions=[TacticalAction.GANK, TacticalAction.DEFEND_TOWER],
                    duration=200.0,
                    priority=1
                )
            ]
        }
    
    def update_strategic_goal(self, game_state: GameState, environment: Dict) -> StrategicGoal:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
        game_time = game_state.game_time
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑—ã –∏–≥—Ä—ã
        if game_time < 900:  # 15 –º–∏–Ω—É—Ç
            new_goal = StrategicGoal.EARLY_FARM
        elif game_time < 2700:  # 45 –º–∏–Ω—É—Ç
            # –í –º–∏–¥–≥–µ–π–º–µ –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Ç—É–∞—Ü–∏–∏
            if environment.get('threat_level', 0) > 0.7:
                new_goal = StrategicGoal.DEFENSE
            elif game_state.networth_advantage > 2000:
                new_goal = StrategicGoal.PUSH
            else:
                new_goal = StrategicGoal.MID_GAME_PRESSURE
        else:  # –õ–µ–π—Ç–≥–µ–π–º
            new_goal = StrategicGoal.LATE_GAME_OBJECTIVES
        
        # –ï—Å–ª–∏ —Ü–µ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        if new_goal != self.current_strategic_goal:
            self.current_strategic_goal = new_goal
            self.goal_start_time = time.time()
            print(f"üéØ –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ª—å: {new_goal.value}")
        
        return new_goal
    
    def select_tactical_action(self, strategic_goal: StrategicGoal, game_state: GameState, environment: Dict) -> TacticalAction:
        """–í—ã–±–æ—Ä —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–∏"""
        
        if strategic_goal == StrategicGoal.EARLY_FARM:
            if environment.get('farm_opportunity', 0) > 0.4:
                new_action = TacticalAction.LANE_FARM
            else:
                new_action = TacticalAction.JUNGLE_FARM
                
        elif strategic_goal == StrategicGoal.MID_GAME_PRESSURE:
            if environment.get('enemy_heroes', 0) == 0:
                new_action = TacticalAction.PUSH_LANE
            else:
                new_action = TacticalAction.GANK
                
        elif strategic_goal == StrategicGoal.DEFENSE:
            new_action = TacticalAction.DEFEND_TOWER
            
        elif strategic_goal == StrategicGoal.PUSH:
            new_action = TacticalAction.PUSH_LANE
            
        else:  # LATE_GAME_OBJECTIVES
            # –í –ª–µ–π—Ç–≥–µ–π–º–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –†–æ—à–∞–Ω–µ –∏ —Ü–µ–ª—è—Ö
            new_action = TacticalAction.ROSHAN
        
        # –ï—Å–ª–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        if new_action != self.current_tactical_action:
            self.current_tactical_action = new_action
            self.tactical_start_time = time.time()
            print(f"   üéØ –ù–æ–≤–æ–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {new_action.value}")
        
        return new_action
    
    def get_low_level_action(self, tactical_action: TacticalAction, game_state: GameState, environment: Dict) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        
        action_map = {
            TacticalAction.LANE_FARM: "farm",
            TacticalAction.JUNGLE_FARM: "farm", 
            TacticalAction.GANK: "attack",
            TacticalAction.PUSH_LANE: "objective",
            TacticalAction.DEFEND_TOWER: "attack",
            TacticalAction.ROSHAN: "objective",
            TacticalAction.RETREAT: "retreat"
        }
        
        return action_map.get(tactical_action, "wait")
    
    def evaluate_goal_success(self, game_state: GameState, previous_state: GameState) -> bool:
        """–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–∏"""
        if self.current_strategic_goal == StrategicGoal.EARLY_FARM:
            # –£—Å–ø–µ—Ö: –Ω–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ–¥–∞ –∏ —É—Ä–æ–≤–Ω–µ–π
            gold_gain = game_state.hero_gold - (previous_state.hero_gold if previous_state else 0)
            level_gain = game_state.hero_level - (previous_state.hero_level if previous_state else 0)
            return gold_gain > 500 or level_gain > 1
            
        elif self.current_strategic_goal == StrategicGoal.PUSH:
            # –£—Å–ø–µ—Ö: —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ –±–∞—à–Ω—è –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
            return random.random() > 0.8  # –ó–∞–≥–ª—É—à–∫–∞
            
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
    
    def get_strategic_analysis(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        return {
            'strategic_goal': self.current_strategic_goal.value,
            'tactical_action': self.current_tactical_action.value,
            'goal_duration': time.time() - self.goal_start_time,
            'tactical_duration': time.time() - self.tactical_start_time,
            'role': self.role.value
        }