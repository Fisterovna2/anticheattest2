import struct
import time
import random
from typing import Tuple, Optional, List
from dataclasses import dataclass
from enum import Enum

class ActionType(Enum):
    MOVE = 1
    ATTACK = 2
    CAST_SPELL = 3
    USE_ITEM = 4
    HOLD = 5
    STOP = 6

@dataclass
class GameCommand:
    action: ActionType
    target_x: float = 0
    target_y: float = 0
    target_entity: int = 0
    ability_slot: int = 0
    item_slot: int = 0

class HeroController:
    """
    –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ—Ä–æ–µ–º –≤ Dota 2
    """
    
    def __init__(self, memory_manager):
        self.memory = memory_manager
        self.command_address = 0x12346000  # –ê–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥
        self.last_command_time = 0
        self.command_cooldown = 0.1  # 100ms –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
        
        # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.map_width = 15000
        self.map_height = 15000
        
    def send_command(self, command: GameCommand) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∏–≥—Ä—É"""
        try:
            current_time = time.time()
            if current_time - self.last_command_time < self.command_cooldown:
                return False  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            command_data = self._pack_command(command)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ø–∞–º—è—Ç—å –∏–≥—Ä—ã
            success = self.memory.write_memory(self.command_address, command_data)
            
            if success:
                self.last_command_time = current_time
                print(f"üéØ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {command.action.name}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {command.action.name}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False
    
    def _pack_command(self, command: GameCommand) -> bytes:
        """–£–ø–∞–∫–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        # –§–æ—Ä–º–∞—Ç: [—Ç–∏–ø_–¥–µ–π—Å—Ç–≤–∏—è][x][y][—Ü–µ–ª—å][—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å][–ø—Ä–µ–¥–º–µ—Ç]
        data = struct.pack(
            '<IffIII',  # unsigned int, 2x float, 3x unsigned int
            command.action.value,
            command.target_x,
            command.target_y, 
            command.target_entity,
            command.ability_slot,
            command.item_slot
        )
        return data
    
    def move_to_position(self, x: float, y: float) -> bool:
        """–î–≤–∏–∂–µ–Ω–∏–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        norm_x = max(0, min(x, self.map_width))
        norm_y = max(0, min(y, self.map_height))
        
        command = GameCommand(
            action=ActionType.MOVE,
            target_x=norm_x,
            target_y=norm_y
        )
        
        return self.send_command(command)
    
    def attack_entity(self, entity_id: int) -> bool:
        """–ê—Ç–∞–∫–∞ —Ü–µ–ª–∏"""
        command = GameCommand(
            action=ActionType.ATTACK,
            target_entity=entity_id
        )
        
        return self.send_command(command)
    
    def cast_ability(self, ability_slot: int, target_x: float = 0, target_y: float = 0, target_entity: int = 0) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        command = GameCommand(
            action=ActionType.CAST_SPELL,
            target_x=target_x,
            target_y=target_y,
            target_entity=target_entity,
            ability_slot=ability_slot
        )
        
        return self.send_command(command)
    
    def use_item(self, item_slot: int, target_x: float = 0, target_y: float = 0, target_entity: int = 0) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        command = GameCommand(
            action=ActionType.USE_ITEM,
            target_x=target_x,
            target_y=target_y,
            target_entity=target_entity,
            item_slot=item_slot
        )
        
        return self.send_command(command)
    
    def hold_position(self) -> bool:
        """–£–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        command = GameCommand(action=ActionType.HOLD)
        return self.send_command(command)
    
    def stop_actions(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        command = GameCommand(action=ActionType.STOP)
        return self.send_command(command)
    
    def get_safe_position(self, current_x: float, current_y: float) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫ –±–∞–∑–µ
        base_x = 1000  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–∞–∑—ã
        base_y = 1000
        
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        offset_x = random.uniform(-500, 500)
        offset_y = random.uniform(-500, 500)
        
        safe_x = base_x + offset_x
        safe_y = base_y + offset_y
        
        return safe_x, safe_y
    
    def get_aggressive_position(self, current_x: float, current_y: float, enemy_x: float, enemy_y: float) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        # –î–≤–∏–∂–µ–Ω–∏–µ –∫ –≤—Ä–∞–≥—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º
        distance_x = enemy_x - current_x
        distance_y = enemy_y - current_y
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        length = (distance_x**2 + distance_y**2)**0.5
        if length > 0:
            distance_x /= length
            distance_y /= length
        
        # –ü–æ–¥—Ö–æ–¥–∏–º –Ω–∞ 300 –µ–¥–∏–Ω–∏—Ü –∫ –≤—Ä–∞–≥—É
        approach_distance = 300
        target_x = enemy_x - distance_x * approach_distance
        target_y = enemy_y - distance_y * approach_distance
        
        return target_x, target_y