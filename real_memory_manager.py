import ctypes
import struct
from ctypes import wintypes
import psutil
from typing import Optional, List
import time

class RealMemoryManager:
    """
    –†–ï–ê–õ–¨–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Dota 2
    """
    
    def __init__(self):
        self.process_handle = None
        self.pid = None
        self.kernel32 = ctypes.windll.kernel32
        self.processed_addresses = set()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –æ—Ç–ª–∞–¥–∫–∏
        self._setup_debug_privileges()
    
    def _setup_debug_privileges(self) -> bool:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π SeDebugPrivilege"""
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π: {e}")
        return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
            hToken = wintypes.HANDLE()
            ADVAPI32.OpenProcessToken(
                self.kernel32.GetCurrentProcess(),
                0x28,  # TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY
                ctypes.byref(hToken)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º LUID –¥–ª—è SeDebugPrivilege
            luid = wintypes.LUID()
            ADVAPI32.LookupPrivilegeValueW(
                None,
                "SeDebugPrivilege",
                ctypes.byref(luid)
            )
            
            # –í–∫–ª—é—á–∞–µ–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é
            new_state = (
                wintypes.DWORD * 3
            )(1, luid.LowPart, 0x2)  # SE_PRIVILEGE_ENABLED
            
            ADVAPI32.AdjustTokenPrivileges(
                hToken,
                False,
                ctypes.byref(new_state),
                0,
                None,
                None
            )
            
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π: {e}")
            return False
    
    def find_dota_process(self) -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ Dota 2"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'exe']):
                try:
                    if proc.info['name'] and 'dota2.exe' in proc.info['name'].lower():
                        print(f"üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å Dota 2: PID {proc.info['pid']}")
                        return proc.info['pid']
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            return None
    
    def connect_to_dota(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ—Ü–µ—Å—Å—É Dota 2"""
        try:
            self.pid = self.find_dota_process()
            if not self.pid:
                print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å Dota 2 –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # PROCESS_ALL_ACCESS
            self.process_handle = self.kernel32.OpenProcess(
                0x1F0FFF,  # PROCESS_ALL_ACCESS
                False,
                self.pid
            )
            
            if not self.process_handle:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å Dota 2")
                return False
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Dota 2 (PID: {self.pid})")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def read_memory(self, address: int, size: int) -> bytes:
        """–ß—Ç–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            buffer = ctypes.create_string_buffer(size)
            bytes_read = ctypes.c_size_t()
            
            success = self.kernel32.ReadProcessMemory(
                self.process_handle,
                ctypes.c_void_p(address),
                buffer,
                size,
                ctypes.byref(bytes_read)
            )
            
            if success and bytes_read.value == size:
                self.processed_addresses.add(address)
                return buffer.raw
            else:
                return b'\x00' * size
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ 0x{address:X}: {e}")
            return b'\x00' * size
    
    def write_memory(self, address: int, data: bytes) -> bool:
        """–ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            bytes_written = ctypes.c_size_t()
            
            success = self.kernel32.WriteProcessMemory(
                self.process_handle,
                ctypes.c_void_p(address),
                data,
                len(data),
                ctypes.byref(bytes_written)
            )
            
            if success and bytes_written.value == len(data):
                self.processed_addresses.add(address)
                print(f"üìù –ó–∞–ø–∏—Å–∞–Ω–æ {len(data)} –±–∞–π—Ç –ø–æ –∞–¥—Ä–µ—Å—É 0x{address:X}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–æ –∞–¥—Ä–µ—Å—É 0x{address:X}")
                return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
    
    def get_module_base(self, module_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –º–æ–¥—É–ª—è"""
        try:
            from ctypes.wintypes import DWORD, HMODULE, MAX_PATH
            
            TH32CS_SNAPMODULE = 0x00000008
            TH32CS_SNAPMODULE32 = 0x00000010
            
            # –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            hSnapshot = self.kernel32.CreateToolhelp32Snapshot(
                TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, 
                self.pid
            )
            
            if hSnapshot == -1:
                return None
            
            class MODULEENTRY32(ctypes.Structure):
                _fields_ = [
                    ("dwSize", DWORD),
                    ("th32ModuleID", DWORD),
                    ("th32ProcessID", DWORD),
                    ("GlblcntUsage", DWORD),
                    ("ProccntUsage", DWORD),
                    ("modBaseAddr", ctypes.POINTER(ctypes.c_byte)),
                    ("modBaseSize", DWORD),
                    ("hModule", HMODULE),
                    ("szModule", ctypes.c_char * (MAX_PATH + 1)),
                    ("szExePath", ctypes.c_char * (MAX_PATH + 1))
                ]
            
            entry = MODULEENTRY32()
            entry.dwSize = ctypes.sizeof(MODULEENTRY32)
            
            # –ò—â–µ–º –º–æ–¥—É–ª—å
            if self.kernel32.Module32First(hSnapshot, ctypes.byref(entry)):
                while True:
                    current_module = entry.szModule.decode('utf-8', errors='ignore')
                    
                    if module_name.lower() in current_module.lower():
                        base_address = ctypes.addressof(entry.modBaseAddr.contents)
                        self.kernel32.CloseHandle(hSnapshot)
                        print(f"üì¶ –ù–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å {current_module} –ø–æ –∞–¥—Ä–µ—Å—É 0x{base_address:X}")
                        return base_address
                    
                    if not self.kernel32.Module32Next(hSnapshot, ctypes.byref(entry)):
                        break
            
            self.kernel32.CloseHandle(hSnapshot)
            print(f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª—è: {e}")
            return None
    
    def pattern_scan(self, pattern: bytes, module_name: str = "client.dll") -> Optional[int]:
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –ø–∞–º—è—Ç–∏ –º–æ–¥—É–ª—è"""
        try:
            base_address = self.get_module_base(module_name)
            if not base_address:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–æ–¥—É–ª—è (–ø—Ä–∏–º–µ—Ä–Ω–æ)
            module_size = 0x2000000  # 32MB –¥–ª—è client.dll
            
            print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º {module_name} –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω...")
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º —á–∞–Ω–∫–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            chunk_size = 4096
            for offset in range(0, module_size, chunk_size):
                chunk = self.read_memory(base_address + offset, chunk_size)
                if not chunk:
                    continue
                
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —á–∞–Ω–∫–µ
                pos = chunk.find(pattern)
                if pos != -1:
                    found_address = base_address + offset + pos
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0x{found_address:X}")
                    return found_address
            
            print("‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            return None
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ handle –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        if self.process_handle:
            self.kernel32.CloseHandle(self.process_handle)
            self.process_handle = None

            print("üîí Handle –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫—Ä—ã—Ç")
