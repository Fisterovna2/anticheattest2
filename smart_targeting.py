import math
import random
import time
from typing import List, Tuple, Optional, Dict
from dataclasses import dataclass
import struct

@dataclass
class GameEntity:
    entity_id: int
    entity_type: str  # "hero", "creep", "tower", "roshan"
    position: Tuple[float, float]
    health: float
    team: str  # "ally", "enemy"
    level: int = 1
    gold_value: int = 0

class SmartTargetSelector:
    """
    –£–ú–ù–´–ô –°–ï–õ–ï–ö–¢–û–† –¶–ï–õ–ï–ô - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
    """
    
    def __init__(self, memory_manager):
        self.memory = memory_manager
        self.last_scan_time = 0
        self.scan_cooldown = 2.0  # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        self.detected_entities: List[GameEntity] = []
        
    def scan_environment(self, player_position: Tuple[float, float], scan_radius: float = 2000) -> List[GameEntity]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        current_time = time.time()
        if current_time - self.last_scan_time < self.scan_cooldown:
            return self.detected_entities
        
        try:
            # –≠–º—É–ª—è—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ –∏–≥—Ä—ã
            
            entities = []
            
            # –ü—Ä–∏–º–µ—Ä: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤
            for i in range(5):  # –ú–∞–∫—Å–∏–º—É–º 5 –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤
                # –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–∏
                pos_x = player_position[0] + random.uniform(-scan_radius, scan_radius)
                pos_y = player_position[1] + random.uniform(-scan_radius, scan_radius)
                health = random.uniform(0.1, 1.0)
                
                distance = self._calculate_distance(player_position, (pos_x, pos_y))
                if distance <= scan_radius:
                    entities.append(GameEntity(
                        entity_id=i,
                        entity_type="hero",
                        position=(pos_x, pos_y),
                        health=health,
                        team="enemy",
                        level=random.randint(1, 25)
                    ))
            
            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∏–ø–æ–≤
            for i in range(10):  # –ö—Ä–∏–ø—ã
                pos_x = player_position[0] + random.uniform(-scan_radius, scan_radius)
                pos_y = player_position[1] + random.uniform(-scan_radius, scan_radius)
                health = random.uniform(0.1, 1.0)
                
                distance = self._calculate_distance(player_position, (pos_x, pos_y))
                if distance <= scan_radius:
                    entities.append(GameEntity(
                        entity_id=100 + i,
                        entity_type="creep", 
                        position=(pos_x, pos_y),
                        health=health,
                        team="enemy",
                        gold_value=random.randint(20, 60)
                    ))
            
            self.detected_entities = entities
            self.last_scan_time = current_time
            
            print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {len(entities)}")
            return entities
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
            return self.detected_entities
    
    def _calculate_distance(self, pos1: Tuple[float, float], pos2: Tuple[float, float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        return math.sqrt((pos2[0] - pos1[0])**2 + (pos2[1] - pos1[1])**2)
    
    def select_attack_target(self, player_position: Tuple[float, float], player_health: float) -> Optional[GameEntity]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏"""
        entities = self.scan_environment(player_position)
        enemy_entities = [e for e in entities if e.team == "enemy"]
        
        if not enemy_entities:
            return None
        
        # –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ü–µ–ª–µ–π
        scored_targets = []
        for entity in enemy_entities:
            score = self._calculate_target_score(entity, player_position, player_health)
            scored_targets.append((entity, score))
        
        # –í—ã–±–æ—Ä —Ü–µ–ª–∏ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º score
        if scored_targets:
            best_target = max(scored_targets, key=lambda x: x[1])
            return best_target[0]
        
        return None
    
    def _calculate_target_score(self, target: GameEntity, player_position: Tuple[float, float], player_health: float) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ score –¥–ª—è —Ü–µ–ª–∏"""
        score = 0.0
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏ (–±–ª–∏–∂–µ = –ª—É—á—à–µ)
        distance = self._calculate_distance(player_position, target.position)
        distance_score = max(0, 1 - distance / 2000)  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 2000 –µ–¥–∏–Ω–∏—Ü
        score += distance_score * 0.3
        
        # –ó–¥–æ—Ä–æ–≤—å–µ —Ü–µ–ª–∏ (–º–µ–Ω—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è = –ª—É—á—à–µ)
        if target.entity_type == "hero":
            health_score = 1 - target.health
            score += health_score * 0.4
        else:  # –ö—Ä–∏–ø—ã –∏ —Ç.–¥.
            health_score = 1 - target.health
            score += health_score * 0.2
        
        # –¶–µ–Ω–Ω–æ—Å—Ç—å —Ü–µ–ª–∏
        if target.entity_type == "hero":
            score += 0.5  # –ì–µ—Ä–æ–∏ - –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ü–µ–ª–∏
        elif target.entity_type == "tower":
            score += 0.7  # –ë–∞—à–Ω–∏ - –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Ü–µ–ª–∏
        elif target.gold_value > 0:
            score += target.gold_value / 100.0  # –ö—Ä–∏–ø—ã —Å –∑–æ–ª–æ—Ç–æ–º
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–∏–∑–±–µ–≥–∞–µ–º —Ü–µ–ª–µ–π –∫–æ–≥–¥–∞ —É –Ω–∞—Å –º–∞–ª–æ HP)
        if player_health < 0.3 and target.entity_type == "hero":
            score -= 0.5  # –®—Ç—Ä–∞—Ñ –∑–∞ –∞—Ç–∞–∫—É –≥–µ—Ä–æ–µ–≤ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º HP
        
        return max(0, score)
    
    def select_farm_location(self, player_position: Tuple[float, float]) -> Tuple[float, float]:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞—Ä–º–∞"""
        entities = self.scan_environment(player_position)
        farmable_entities = [e for e in entities if e.team == "enemy" and e.entity_type in ["creep"]]
        
        if farmable_entities:
            # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∏–ø–∞
            closest_creep = min(farmable_entities, 
                              key=lambda e: self._calculate_distance(player_position, e.position))
            return closest_creep.position
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ñ–∞—Ä–º–∞
            return self._get_safe_farm_position(player_position)
    
    def _get_safe_farm_position(self, player_position: Tuple[float, float]) -> Tuple[float, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ñ–∞—Ä–º–∞"""
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        safe_locations = [
            (2000, 2000),   # –õ–µ—Å —Ä–∞–¥–∏–∞–Ω—Ç–æ–≤
            (13000, 13000), # –õ–µ—Å –¥–∏—Ä–æ–≤
            (7000, 7000),   # –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
        ]
        
        # –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
        closest_safe = min(safe_locations, 
                         key=lambda loc: self._calculate_distance(player_position, loc))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        offset_x = random.uniform(-500, 500)
        offset_y = random.uniform(-500, 500)
        
        return (closest_safe[0] + offset_x, closest_safe[1] + offset_y)
    
    def select_retreat_position(self, player_position: Tuple[float, float]) -> Tuple[float, float]:
        """–í—ã–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
        entities = self.scan_environment(player_position)
        enemy_heroes = [e for e in entities if e.team == "enemy" and e.entity_type == "hero"]
        
        if enemy_heroes:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞–≥–æ–≤
            avg_enemy_x = sum(e.position[0] for e in enemy_heroes) / len(enemy_heroes)
            avg_enemy_y = sum(e.position[1] for e in enemy_heroes) / len(enemy_heroes)
            
            # –î–≤–∏–≥–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            direction_x = player_position[0] - avg_enemy_x
            direction_y = player_position[1] - avg_enemy_y
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            length = math.sqrt(direction_x**2 + direction_y**2)
            if length > 0:
                direction_x /= length
                direction_y /= length
            
            # –û—Ç—Å—Ç—É–ø–∞–µ–º –Ω–∞ 1000 –µ–¥–∏–Ω–∏—Ü
            retreat_x = player_position[0] + direction_x * 1000
            retreat_y = player_position[1] + direction_y * 1000
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ä—Ç–æ–π
            retreat_x = max(500, min(retreat_x, 14500))
            retreat_y = max(500, min(retreat_y, 14500))
            
            return (retreat_x, retreat_y)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–µ
            return (1000, 1000)
    
    def get_environment_analysis(self, player_position: Tuple[float, float]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        entities = self.scan_environment(player_position)
        
        analysis = {
            'total_entities': len(entities),
            'enemy_heroes': len([e for e in entities if e.team == 'enemy' and e.entity_type == 'hero']),
            'ally_heroes': len([e for e in entities if e.team == 'ally' and e.entity_type == 'hero']),
            'farmable_creeps': len([e for e in entities if e.team == 'enemy' and e.entity_type == 'creep']),
            'threat_level': self._calculate_threat_level(entities, player_position),
            'farm_opportunity': self._calculate_farm_opportunity(entities, player_position)
        }
        
        return analysis
    
    def _calculate_threat_level(self, entities: List[GameEntity], player_position: Tuple[float, float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã"""
        enemy_heroes = [e for e in entities if e.team == 'enemy' and e.entity_type == 'hero']
        
        if not enemy_heroes:
            return 0.0
        
        total_threat = 0.0
        for hero in enemy_heroes:
            distance = self._calculate_distance(player_position, hero.position)
            distance_factor = max(0, 1 - distance / 1500)  # –£–≥—Ä–æ–∑–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
            threat = distance_factor * (1 - hero.health)  # –†–∞–Ω–µ–Ω—ã–µ –≥–µ—Ä–æ–∏ –º–µ–Ω–µ–µ –æ–ø–∞—Å–Ω—ã
            total_threat += threat
        
        return min(total_threat / len(enemy_heroes), 1.0)
    
    def _calculate_farm_opportunity(self, entities: List[GameEntity], player_position: Tuple[float, float]) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∞—Ä–º–∞"""
        farmable = [e for e in entities if e.team == 'enemy' and e.entity_type == 'creep']
        
        if not farmable:
            return 0.0
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –±–ª–∏–∑–æ—Å—Ç—å –∫—Ä–∏–ø–æ–≤
        opportunity = 0.0
        for creep in farmable:
            distance = self._calculate_distance(player_position, creep.position)
            distance_factor = max(0, 1 - distance / 1000)
            opportunity += distance_factor
        
        return min(opportunity / len(farmable), 1.0)