import struct
import json
import os
from typing import Dict, List, Optional

class WorkingSkinChanger:
    """
    –†–ê–ë–û–ß–ê–Ø —Å–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã —Å–∫–∏–Ω–æ–≤ –¥–ª—è Dota 2
    """
    
    def __init__(self, memory_manager):
        self.memory = memory_manager
        self.skin_config = self._load_skin_config()
        self.current_skins: Dict[str, str] = {}
        
    def _load_skin_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤"""
        config_path = "skin_config.json"
        default_config = {
            "heroes": {
                "Anti-Mage": {
                    "base_address": 0x12345678,
                    "skin_offset": 0x200,
                    "skins": {
                        "Default": 0,
                        "The Basher Blades": 1,
                        "Furyblade": 2
                    }
                },
                "Invoker": {
                    "base_address": 0x12345680,
                    "skin_offset": 0x200,
                    "skins": {
                        "Default": 0,
                        "Dark Artistry": 1,
                        "Crimson Cavalier": 2
                    }
                },
                "Pudge": {
                    "base_address": 0x12345688,
                    "skin_offset": 0x200,
                    "skins": {
                        "Default": 0,
                        "Dragonclaw Hook": 1,
                        "Scavenging Guttleslug": 2
                    }
                }
            }
        }
        
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    return json.load(f)
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                with open(config_path, 'w') as f:
                    json.dump(default_config, f, indent=2)
                return default_config
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤: {e}")
            return default_config
    
    def detect_hero_addresses(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –≥–µ—Ä–æ–µ–≤"""
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–µ—Ä–æ–µ–≤ –≤ –ø–∞–º—è—Ç–∏
            hero_patterns = {
                "Anti-Mage": b"\x41\x6E\x74\x69\x2D\x4D\x61\x67\x65",  # "Anti-Mage"
                "Invoker": b"\x49\x6E\x76\x6F\x6B\x65\x72",  # "Invoker"
                "Pudge": b"\x50\x75\x64\x67\x65"  # "Pudge"
            }
            
            found_any = False
            for hero_name, pattern in hero_patterns.items():
                address = self.memory.pattern_scan(pattern)
                if address:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å –≥–µ—Ä–æ—è {hero_name}: 0x{address:X}")
                    found_any = True
            
            return found_any
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –≥–µ—Ä–æ–µ–≤: {e}")
            return False
    
    def get_available_heroes(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤"""
        return list(self.skin_config["heroes"].keys())
    
    def get_hero_skins(self, hero: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–∏–Ω–æ–≤ –¥–ª—è –≥–µ—Ä–æ—è"""
        if hero in self.skin_config["heroes"]:
            return list(self.skin_config["heroes"][hero]["skins"].keys())
        return []
    
    def apply_skin(self, hero: str, skin: str) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–Ω–∞ –∫ –≥–µ—Ä–æ—é"""
        try:
            if hero not in self.skin_config["heroes"]:
                print(f"‚ùå –ì–µ—Ä–æ–π {hero} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            if skin not in self.skin_config["heroes"][hero]["skins"]:
                print(f"‚ùå –°–∫–∏–Ω {skin} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≥–µ—Ä–æ—è {hero}")
                return False
            
            skin_id = self.skin_config["heroes"][hero]["skins"][skin]
            hero_config = self.skin_config["heroes"][hero]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            base_address = hero_config["base_address"]
            skin_address = base_address + hero_config["skin_offset"]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Å–∫–∏–Ω–∞ –≤ –ø–∞–º—è—Ç—å
            skin_data = struct.pack('<I', skin_id)  # 4-–±–∞–π—Ç–æ–≤–æ–µ —Ü–µ–ª–æ–µ
            success = self.memory.write_memory(skin_address, skin_data)
            
            if success:
                self.current_skins[hero] = skin
                print(f"üé® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å–∫–∏–Ω {skin} (ID: {skin_id}) –∫ {hero}")
                self._save_current_skins()
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–Ω {skin} –∫ {hero}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–Ω–∞: {e}")
            return False
    
    def _save_current_skins(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–Ω–æ–≤"""
        try:
            with open("current_skins.json", 'w') as f:
                json.dump(self.current_skins, f, indent=2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∏–Ω–æ–≤: {e}")
    
    def load_current_skins(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–Ω–æ–≤"""
        try:
            if os.path.exists("current_skins.json"):
                with open("current_skins.json", 'r') as f:
                    self.current_skins = json.load(f)
                print(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.current_skins)} –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–∫–∏–Ω–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–∏–Ω–æ–≤: {e}")
    
    def get_current_skin(self, hero: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∏–Ω–∞ –≥–µ—Ä–æ—è"""
        try:
            if hero not in self.current_skins:
                return None
            return self.current_skins[hero]
        except Exception:
            return None