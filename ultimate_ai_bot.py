#!/usr/bin/env python3
"""
ULTIMATE AI BOT - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –°–û –í–°–ï–ú–ò –£–õ–£–ß–®–ï–ù–ò–Ø–ú–ò
"""

import time
import json
import os
import sys
import random
from datetime import datetime
from typing import Dict, List, Optional, Tuple
from enum import Enum
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from advanced_rl_learning import AdvancedReinforcementLearner
from hierarchical_ai import HierarchicalAI, StrategicGoal
from learning_ai_brain import LearningAIBrain, GameState, HeroRole
from smart_targeting import SmartTargetSelector, GameEntity
from hero_controller import HeroController, GameCommand, ActionType
from real_memory_manager import RealMemoryManager
from working_skin_changer import WorkingSkinChanger
from enhanced_metrics import EnhancedMetricsCollector
from error_handler import handle_errors, safe_execute

class UltimateAIBot:
    """
    ULTIMATE AI –ë–û–¢ - –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    """
    
    def __init__(self):
        self.is_running = False
        self.components = {}
        self.config = self._load_config()
        
        print("üöÄ ULTIMATE DOTA 2 AI BOT - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
        print("=" * 70)
        print("   üß† Advanced DQN + Noisy Networks")
        print("   üìä Prioritized Experience Replay") 
        print("   üéØ Hierarchical Decision Making")
        print("   üìà Advanced Learning Visualization")
        print("=" * 70)
    
    def _load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "bot": {
                "role": "carry",
                "aggressiveness": 0.7,
                "decision_interval": 2.0,
                "auto_skins": True
            },
            "steam": {
                "auto_restart": True,
                "restart_interval": 3600
            },
            "ai": {
                "learning_enabled": True,
                "adaptation_speed": 0.1
            },
            "security": {
                "max_operations_per_minute": 100,
                "emergency_shutdown": True
            },
            "dashboard": {
                "enabled": True,
                "port": 5000
            }
        }
        
        try:
            if os.path.exists("ultimate_config.json"):
                with open("ultimate_config.json", 'r') as f:
                    return json.load(f)
            else:
                with open("ultimate_config.json", 'w') as f:
                    json.dump(default_config, f, indent=2)
                return default_config
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config

    @handle_errors(max_retries=3, delay=2.0)
    def initialize_system(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ultimate AI —Å–∏—Å—Ç–µ–º—ã"""
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ultimate AI —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # 1. Memory Manager
            self.components["memory"] = RealMemoryManager()
            print("‚úÖ Memory Manager –≥–æ—Ç–æ–≤")
            
            # 2. –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–π
            self.components["target_selector"] = SmartTargetSelector(self.components["memory"])
            print("‚úÖ –£–º–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–π –≥–æ—Ç–æ–≤")
            
            # 3. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è AI —Å–∏—Å—Ç–µ–º–∞
            role = HeroRole(self.config["bot"]["role"])
            self.components["hierarchical_ai"] = HierarchicalAI(
                self.components["memory"], 
                None,  # Metrics –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
                role
            )
            print("‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
            
            # 4. –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è RL —Å–∏—Å—Ç–µ–º–∞
            self.components["metrics"] = EnhancedMetricsCollector()
            self.components["ai"] = LearningAIBrain(
                self.components["memory"],
                self.components["metrics"], 
                role
            )
            
            # –ó–∞–º–µ–Ω–∞ RL —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ—Ä—Å–∏—é
            self.components["ai"].rl_learner = AdvancedReinforcementLearner()
            print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è RL —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
            
            # 5. Hero Controller
            self.components["controller"] = HeroController(self.components["memory"])
            print("‚úÖ Hero Controller –≥–æ—Ç–æ–≤")
            
            # 6. Skin Changer
            self.components["skins"] = WorkingSkinChanger(self.components["memory"])
            self.components["skins"].load_current_skins()
            print("‚úÖ Skin Changer –≥–æ—Ç–æ–≤")
            
            # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º
            self.components["metrics"].start_collection()
            
            print("‚úÖ Ultimate AI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    @handle_errors(max_retries=5, delay=5.0)
    def connect_to_game(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dota 2"""
        print("üéØ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Dota 2...")
        
        memory = self.components["memory"]
        
        if not memory.connect_to_dota():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Dota 2")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥—É–ª–∏
        if not memory.get_module_base("client.dll"):
            print("‚ùå –ò–≥—Ä–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Dota 2")
        return True

    def apply_ai_decision(self, decision: dict) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è AI"""
        try:
            controller = self.components["controller"]
            target_selector = self.components["target_selector"]
            ai = self.components["ai"]
            
            action = decision["action"]
            game_state = ai.analyze_game_state()
            
            if action == "attack":
                # –£–º–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏
                target = target_selector.select_attack_target(game_state.position, game_state.hero_health)
                if target:
                    return controller.attack_entity(target.entity_id)
                else:
                    # –ù–µ—Ç —Ü–µ–ª–µ–π - –¥–≤–∏–≥–∞–µ–º—Å—è –∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    aggressive_pos = controller.get_aggressive_position(
                        game_state.position[0], game_state.position[1],
                        game_state.position[0] + 500, game_state.position[1] + 500  # –ü—Ä–∏–º–µ—Ä
                    )
                    return controller.move_to_position(aggressive_pos[0], aggressive_pos[1])
            
            elif action == "retreat":
                # –£–º–Ω–æ–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                retreat_pos = target_selector.select_retreat_position(game_state.position)
                return controller.move_to_position(retreat_pos[0], retreat_pos[1])
            
            elif action == "farm":
                # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞—Ä–º–∞
                farm_pos = target_selector.select_farm_location(game_state.position)
                return controller.move_to_position(farm_pos[0], farm_pos[1])
            
            elif action == "objective":
                # –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–∏
                objective_x = random.uniform(5000, 10000)
                objective_y = random.uniform(5000, 10000)
                return controller.move_to_position(objective_x, objective_y)
            
            else:  # wait
                return controller.hold_position()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è AI —Ä–µ—à–µ–Ω–∏—è: {e}")
            return False

    def _apply_strategic_correction(self, rl_action: str, strategic_action: str, 
                                  goal: StrategicGoal, game_state: GameState) -> str:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ RL —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π"""
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –≤—Å–µ
        if game_state.hero_health < 0.2:
            return "retreat"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
        if goal == StrategicGoal.DEFENSE and rl_action == "farm":
            return "attack"  # –ó–∞—â–∏—Ç–∞ –≤–∞–∂–Ω–µ–µ —Ñ–∞—Ä–º–∞
        
        if goal == StrategicGoal.PUSH and rl_action == "retreat":
            return "objective"  # –ü—É—à –≤–∞–∂–Ω–µ–µ –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ HP)
        
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –¥–æ–≤–µ—Ä—è–µ–º RL
        return rl_action

    def game_loop(self):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º AI"""
        print("üéÆ –ó–∞–ø—É—Å–∫ Ultimate AI —Ü–∏–∫–ª–∞...")
        
        ai = self.components["ai"]
        hierarchical_ai = self.components["hierarchical_ai"]
        metrics = self.components["metrics"]
        
        cycle_count = 0
        last_visualization_time = time.time()
        previous_game_state = None
        
        while self.is_running:
            try:
                cycle_count += 1
                
                # 1. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
                game_state = ai.analyze_game_state()
                environment = self.components["target_selector"].get_environment_analysis(game_state.position)
                
                # 2. –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
                strategic_goal = hierarchical_ai.update_strategic_goal(game_state, environment)
                tactical_action = hierarchical_ai.select_tactical_action(strategic_goal, game_state, environment)
                low_level_action = hierarchical_ai.get_low_level_action(tactical_action, game_state, environment)
                
                # 3. –ü—Ä–∏–Ω—è—Ç–∏–µ RL —Ä–µ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–µ—Ä–∞—Ä—Ö–∏–∏
                decision = ai.decide_next_action(game_state)
                
                # 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                final_action = self._apply_strategic_correction(
                    decision["action"], low_level_action, strategic_goal, game_state
                )
                
                # 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
                success = False
                if final_action != "wait":
                    success = self.apply_ai_decision(decision)
                    
                    if success:
                        ai.successful_actions += 1
                    else:
                        ai.failed_actions += 1
                
                # 6. –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
                if previous_game_state is not None:
                    reward = ai.rl_learner.compute_advanced_reward(
                        game_state, final_action, success, environment, previous_game_state
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
                    if hasattr(ai, 'last_state_vector') and ai.last_state_vector is not None:
                        ai.rl_learner.remember(
                            ai.last_state_vector,
                            ai.last_action,
                            reward,
                            ai.rl_learner.get_state_vector(game_state),
                            False
                        )
                
                # 7. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                metrics.record_vac_detection({
                    "cycle": cycle_count,
                    "final_action": final_action,
                    "rl_action": decision["action"],
                    "strategic_goal": strategic_goal.value,
                    "tactical_action": tactical_action.value,
                    "success": success,
                    "environment": environment,
                    "learning_stats": ai.get_learning_stats(),
                    "strategic_analysis": hierarchical_ai.get_strategic_analysis()
                })
                
                # 8. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
                if cycle_count % 50 == 0:
                    ai.save_learning_progress()
                    
                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    current_time = time.time()
                    if current_time - last_visualization_time > 300:
                        ai.rl_learner.plot_learning_progress()
                        last_visualization_time = current_time
                
                # 9. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if cycle_count % 30 == 0:
                    self._print_ultimate_progress(cycle_count, ai, hierarchical_ai)
                
                # 10. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                previous_game_state = game_state
                
                # 11. –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ—à–µ–Ω–∏—è–º–∏
                interval = self.config["bot"]["decision_interval"]
                time.sleep(interval)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ Ultimate AI —Ü–∏–∫–ª–µ: {e}")
                time.sleep(5)

    def _print_ultimate_progress(self, cycle_count: int, ai: LearningAIBrain, hierarchical_ai: HierarchicalAI):
        """–í—ã–≤–æ–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        stats = ai.get_learning_stats()
        strategic_info = hierarchical_ai.get_strategic_analysis()
        
        print(f"üìà Ultimate AI - –¶–∏–∫–ª {cycle_count}:")
        print(f"   üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategic_info['strategic_goal']}")
        print(f"   ‚ö° –¢–∞–∫—Ç–∏–∫–∞: {strategic_info['tactical_action']}")
        print(f"   üß† –ü–∞–º—è—Ç—å RL: {stats['memory_size']} –æ–ø—ã—Ç–æ–≤")
        print(f"   üí∞ –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {stats['avg_reward']:.2f}")
        print(f"   üìä Success Rate: {stats['success_rate']:.1%}")
        print(f"   üî• Q-–∑–Ω–∞—á–µ–Ω–∏—è: {stats['avg_q_value']:.2f}")

    @safe_execute(default_value=False)
    def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Ultimate Dota 2 AI Bot...")
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if not self.initialize_system():
                return False
            
            # 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
            if not self.connect_to_game():
                return False
            
            # 3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–Ω–æ–≤
            if self.config["bot"]["auto_skins"]:
                self.components["skins"].apply_skin("Anti-Mage", "The Basher Blades")
                time.sleep(1)
            
            # 4. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.is_running = True
            self.game_loop()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False
        finally:
            self.shutdown()

    def shutdown(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        print("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Ultimate AI...")
        self.is_running = False
        
        try:
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if "ai" in self.components:
                self.components["ai"].rl_learner.plot_learning_progress("final_learning_progress.png")
                self.components["ai"].save_learning_progress()
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                final_stats = self.components["ai"].get_learning_stats()
                strategic_info = self.components["hierarchical_ai"].get_strategic_analysis()
                
                print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ULTIMATE AI:")
                print(f"   üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategic_info['strategic_goal']}")
                print(f"   üìà –£—Å–ø–µ—à–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {final_stats['successful_actions']}")
                print(f"   üí∞ –ò—Ç–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {final_stats['avg_reward']:.2f}")
                print(f"   üß† –®–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {final_stats['learn_steps']}")
                print(f"   üíæ –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {final_stats['memory_size']}")
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if "metrics" in self.components:
                self.components["metrics"].stop()
            
            if "memory" in self.components:
                self.components["memory"].close()
            
            print("‚úÖ Ultimate AI –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = UltimateAIBot()
    
    try:
        success = bot.run()
        if success:
            print("üéâ Ultimate AI –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!")
            return 0
        else:
            print("‚ùå Ultimate AI –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        bot.shutdown()
        return 0
    except Exception as e:
        print(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()

    exit(exit_code)
